<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx.xsd">


	<!-- 自动扫描 -->
	<context:component-scan base-package="com.ilink" />

	<!-- 引入配置文件 -->
	<!-- <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> 
		<property name="locations"> <list> <value>classpath:jdbc.properties</value> 
		<value>classpath:redis.properties</value> </list> </property> </bean> <bean 
		id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"> 
		<property name="driverClassName" value="${driver}" /> <property name="url" 
		value="${url}" /> <property name="username" value="${username}" /> <property 
		name="password" value="${password}" /> 初始化连接大小 <property name="initialSize" 
		value="${initialSize}"></property> 连接池最大数量 <property name="maxActive" value="${maxActive}"></property> 
		连接池最大空闲 <property name="maxIdle" value="${maxIdle}"></property> 连接池最小空闲 <property 
		name="minIdle" value="${minIdle}"></property> 获取连接最大等待时间 <property name="maxWait" 
		value="${maxWait}"></property> </bean> spring和MyBatis完美整合，不需要mybatis的配置映射文件 
		<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> 
		<property name="dataSource" ref="dataSource" /> 自动扫描mapping.xml文件 <property 
		name="mapperLocations" value="classpath:mapping/*.xml"></property> PageHelper分页插件 
		<property name="plugins"> <array> <bean class="com.github.pagehelper.PageInterceptor"> 
		<property name="properties"> 使用下面的方式配置参数，一行配置一个 <value> offsetAsPageNum=true 
		rowBoundsWithCount=true pageSizeZero=true reasonable=true </value> </property> 
		</bean> </array> </property> </bean> DAO接口所在包名，Spring会自动查找其下的类 <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> 
		<property name="basePackage" value="com.idoctor.dao" /> <property name="sqlSessionFactoryBeanName" 
		value="sqlSessionFactory"></property> </bean> Redis jedis 相关配置 <bean id="jedisPoolConfig" 
		class="redis.clients.jedis.JedisPoolConfig"> 控制一个pool最多有多少个状态为idle(空闲)的jedis实例 
		<property name="maxIdle" value="${redis.maxIdle}"></property> 控制一个pool可分配多少个jedis实例 
		<property name="maxTotal" value="${redis.maxTotal}"></property> 表示当borrow一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛出JedisConnectionException 
		<property name="maxWaitMillis" value="${redis.maxWaitMillis}"></property> 
		在borrow一个jedis实例时，是否提前进行validate操作；如果为true，则得到的jedis实例均是可用的 <property name="testOnBorrow" 
		value="${redis.testOnBorrow}"></property> </bean> <bean id="jedisConnectionFactory" 
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" 
		destroy-method="destroy"> <property name="poolConfig" ref="jedisPoolConfig"></property> 
		<property name="hostName" value="${redis.hostName}"></property> <property 
		name="port" value="${redis.port}"></property> <property name="timeout" value="${redis.timeout}"></property> 
		<property name="usePool" value="${redis.usePool}"></property> </bean> <bean 
		id="jedisTemplate" class="org.springframework.data.redis.core.RedisTemplate"> 
		<property name="connectionFactory" ref="jedisConnectionFactory"></property> 
		<property name="keySerializer"> <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" 
		/> </property> <property name="hashKeySerializer"> <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" 
		/> </property> <property name="valueSerializer"> <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" 
		/> </property> <property name="hashValueSerializer"> <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" 
		/> </property> <property name="enableTransactionSupport" value="true"></property> 
		</bean> (事务管理)transaction manager, use JtaTransactionManager for global tx 
		<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
		<property name="dataSource" ref="dataSource" /> </bean> -->

	 <bean id="multipartResolver"  
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
        <!-- 上传文件大小上限，单位为字节（1G） -->
        <property name="maxUploadSize">  
            <value>1073741824</value>
        </property>  
        <!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 -->
        <property name="defaultEncoding">
            <value>UTF-8</value>
        </property>
    </bean>

</beans>